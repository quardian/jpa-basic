JPA 어플리케이션 개발

1. JPA 구동방식

    1) Persistence 가 설정정보 조회
        - META-INF/persistence.xml
    2) Persistence 가 EntityManagerFactory 생성
    3) EntityManagerFactory로 부터 EntityManager 생성


2. 소스 골격

    @Entity
    @Data
    public class Member {
        @Id
        private Long id;
        private String name;

        public Member() {
        }

        public Member(Long id, String name) {
            this.id = id;
            this.name = name;
        }
    }


    public static void main(String[] args)
    {
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("h2Db");
        EntityManager em = emf.createEntityManager();
        EntityTransaction tx = em.getTransaction();

        tx.begin();
        try{
            Member member = new Member(1L, "이인호");
            em.persist(member);
            tx.commit();
        }catch (Exception e) {
            if ( tx != null ) tx.rollback();
        }
        finally {
            if ( em != null ) em.close();
            emf.close();
        }
    }

3. 주의사항

    - EntityManagerFactory 는 하나만 생성해서 어플리케이션 전체에서 공유
    - EntityManager는 쓰레드 간에 공유 X ( 사용하고 버려야 함 )
    - JPA의 모든 데이터 변경은 트랜잭션 안에서 실행 ( 단, 조회는 상관없음 )

4. JPQL 소개
    -

5. EntityManager 인터페이스
    - public void persist(Object entity);
    - public <T> T merge(T entity);
    - public void remove(Object entity);
    - public <T> T find(Class<T> entityClass, Object primaryKey);
    - public <T> T find(Class<T> entityClass, Object primaryKey
                        , Map<String, Object> properties);
    - public <T> T find(Class<T> entityClass, Object primaryKey
                        , LockModeType lockMode);
    - public <T> T find(Class<T> entityClass, Object primaryKey
                        , LockModeType lockMode, Map<String, Object> properties);
    - public <T> T getReference(Class<T> entityClass, Object primaryKey);
    - public void flush();
    - public void setFlushMode(FlushModeType flushMode);
    - public FlushModeType getFlushMode();
    - public void lock(Object entity, LockModeType lockMode);
    - public void lock(Object entity, LockModeType lockMode,
                           Map<String, Object> properties);
    - public void refresh(Object entity);
    - public void refresh(Object entity,
                                  Map<String, Object> properties);
    - public void refresh(Object entity, LockModeType lockMode);
    - public void clear();
    - public void detach(Object entity);
    - public boolean contains(Object entity);
    - public LockModeType getLockMode(Object entity);
    - public void setProperty(String propertyName, Object value);
    - public Map<String, Object> getProperties();

    - public Query createQuery(String qlString);
    - public <T> TypedQuery<T> createQuery(CriteriaQuery<T> criteriaQuery);
    - public Query createQuery(CriteriaUpdate updateQuery);
    - public Query createQuery(CriteriaDelete deleteQuery);
    - public <T> TypedQuery<T> createQuery(String qlString, Class<T> resultClass);
    - public Query createNamedQuery(String name);
    - public <T> TypedQuery<T> createNamedQuery(String name, Class<T> resultClass);
    - public Query createNativeQuery(String sqlString);
    - public Query createNativeQuery(String sqlString, Class resultClass);
    - public Query createNativeQuery(String sqlString, String resultSetMapping);
    - public StoredProcedureQuery createNamedStoredProcedureQuery(String name);
    - public StoredProcedureQuery createStoredProcedureQuery(String procedureName);
    - public StoredProcedureQuery createStoredProcedureQuery(
      	       String procedureName, Class... resultClasses);
    - public StoredProcedureQuery createStoredProcedureQuery(
                    String procedureName, String... resultSetMappings);
    - public void joinTransaction();
    - public boolean isJoinedToTransaction();
    - public <T> T unwrap(Class<T> cls);
    - public Object getDelegate();
    - public void close();
    - public boolean isOpen();
    - public EntityTransaction getTransaction();
    - public EntityManagerFactory getEntityManagerFactory();
    - public CriteriaBuilder getCriteriaBuilder();
    - public Metamodel getMetamodel();
    - public <T> EntityGraph<T> createEntityGraph(Class<T> rootType);
    - public EntityGraph<?> createEntityGraph(String graphName);
    - public  EntityGraph<?> getEntityGraph(String graphName);
    - public <T> List<EntityGraph<? super T>> getEntityGraphs(Class<T> entityClass);

6. Query
    - List getResultList();
    - default Stream getResultStream() { return getResultList().stream(); }
    - Object getSingleResult();
    - int executeUpdate();
    - Query setMaxResults(int maxResult);
    - int getMaxResults();
    - Query setFirstResult(int startPosition);
    - int getFirstResult();

    - Query setHint(String hintName, Object value);
    - Map<String, Object> getHints();

    - <T> Query setParameter(Parameter<T> param, T value);
    - Query setParameter(Parameter<Calendar> param, Calendar value,
                             TemporalType temporalType);
    - Query setParameter(Parameter<Date> param, Date value,
                             TemporalType temporalType);
    - Query setParameter(String name, Object value);
    - Query setParameter(String name, Calendar value,
                             TemporalType temporalType);
    - Query setParameter(String name, Date value,
                             TemporalType temporalType);
    - Query setParameter(int position, Object value);
    - Query setParameter(int position, Calendar value,
                             TemporalType temporalType);
    - Query setParameter(int position, Date value,
                             TemporalType temporalType);

    - Set<Parameter<?>> getParameters();
    - Parameter<?> getParameter(String name);
    - <T> Parameter<T> getParameter(String name, Class<T> type);
    - Parameter<?> getParameter(int position);
    - <T> Parameter<T> getParameter(int position, Class<T> type);

    - boolean isBound(Parameter<?> param);

    - <T> T getParameterValue(Parameter<T> param);
    - Object getParameterValue(String name);
    - Object getParameterValue(int position);

    - Query setFlushMode(FlushModeType flushMode);
    - FlushModeType getFlushMode();

    - Query setLockMode(LockModeType lockMode);
    - LockModeType getLockMode();

    - <T> T unwrap(Class<T> cls);
    -
    -
    -
    -