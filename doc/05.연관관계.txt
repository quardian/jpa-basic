--------------------------------------
연관관계 매핑 기초
--------------------------------------
    [목표]
        - 객체와 테이블 연관계의 차이 이해
        - 객체의 참조와 테이블 외래키를 매핑
        - 용어 이해
            . 방향(Direction)     : 단방향, 양방향
            . 다중성(Multiplicity) : 다대일(N:1), 일대다(1:N), 일대일(1:1), 다대다(N:M) 이해
            . 연관관계 주인(Owner)  : 객체 양향향 연관계계는 관리 주인이 필요

--------------------------------------
연관관계 주인과 mappedBy
--------------------------------------
    1) 명확한 이해를 위해서 <객체와 테이블이 관계를 맺는 차이>를 이해 선행

        - 객체 연관관계 = 2 개
            . 회원 -> 팀 : 연관관계 1개 (단방향)
            . 팀 -> 회원 : 연관관계 1개 (단방향)
            ** 객체의 양방향 관계는 없으며,
               사실 양방향 관계가 아니라 서로 다른 단방향 관계 2 개다.

        - 테이블 연관과계 = 1개
            . 회원 <-> 팀 : 연관계계 1개(양방향)
            ** PK, FK 조인으로 양쪽 관계 모두 조회 가능.

    2) 객체의 양방향은 둘 중 하나로 외래 키를 관리해야 한다.

        Member                  Team
        - id                    - id
        - Team team *           - name
        - username              - List members *

        MEMBER table
            - MEMBER_ID (PK)
            - TEAM_ID   (FK)
            - USERNAME

        [이슈] Member 객체의 TEAM_ID 수정을 DB 에 반영하는 기준은 무엇인가?
              1) Member 객체 수정시 DB 반영 ? or
              2) Team 객체의 members 객체 수정시 DB 반영 ?
            이런 이유로 연관관계 주인(Owner)를 지정한다.

        [양방향 매핑 규칙]
            - 객체의 두 관계 중 하나를 연관관계의 주인으로 지정
            - 연관관계의 주인만이 외래키(FK)를 관리(등록, 수정) **
            - 주인이 아닌 쪽은 읽기만 가능 **
            - 주인은 mappedBy 속성 사용 X
            - 주인이 아니면 mappedBy 속성으로 주인 지정

        [Owner 선정 가이드]
            - 왜래키(FK)가 있는 곳을 주인으로 정해라
            - 아래에서는 Member의 team이 FK 이므로, 연관관계의 주인.

            Member                 Team
            - id                    - id
            - Team team (Owner)     - name
            - username              - List members (mappedBy)

            * Team 테이블을 수정했는데, 전혀 다른 Member 테이블이
              UPDATE가 발생한다면, 직관적이지도 않다.

--------------------------------------
양방향 매핑 시 가장 많이 하는 실수
--------------------------------------
    Team team = new Team("TeamA");
    em.persist(team);

    Member member = new Member("memberA");

    // 역방향(주인이 아닌 방향)만 연관관계 설정
    team.getMembers().add(member);

    em.persist(member);     <== MEMBER.TEAM_ID 가 NULL 들어감.

    해설) team.getMembers()는 읽기 전용.
        Owner인 member의 team 에 할당해야 DB 에 저장된다.


--------------------------------------
양방향 연관관계 주의 - 실습
--------------------------------------
    - 순수 객체 상태를 고려해서 항상 양쪽에 값을 설정하자
    - 연관관계 편의 메소드 생성하자
    - 양방향 매핑시 무한 루프를 조심하자
        예) toString, lombok, JSON 생성 라이브러리
        - entity를 직접 반환값으로 JSON으로 바로 반환시 문제가 발생함

    solution)
        - lombok 의 @toString을 사용하지 말자.
          (필요시, 수동으로 toString 구현하고, 쌍방향 무한루트 되지 않게 작성)
        - Controller 에서 직접 Entity를 직접 JSON으로 반환하지 말자.
          ( 별도의 값만 있는 DTO 객체를 이용하여 반환 )

--------------------------------------
양방향 매핑 정리
--------------------------------------
    1. 기본적으로 단방향 매핑만 한다.
    2. JPQL에서 역방향으로 탐색할 일 많음
    3. 단방향 매핑을 잘 하고 양방향은 필요할 때 추가해도 됨 (테이블에 미영향)

--------------------------------------
연관관계 매핑시 고려사항 3 가지
--------------------------------------
1. 다중성
    1) 다대일 [N:1] : @ManyToOne
    2) 일대다 [1:N] : @OneToMany
    3) 일대일 [1:1] : @OneToOne
    4) 다대다 [N:M] : @ManyToMany

2. 단방향, 양방향
    1) 테이블
        - 외래키 하나로 양쪽 조인 가능
        - 사실 방향이라는 개념 없음
    2) 객체
        - 참조용 필드가 있는 쪽으로만 참조 가능
        - 한쪽만 참조하면 단방향
        - 양쪽이 서로 참조하면 양방향

3. 연관관계 주인
    - 테이블은 왜래키 하나로 두 테이블이 연관관계를 맺음
    - 객체 양방향 관계는 A->B, B-A 처럼 참조가 2군데
      객체 양방향 관계는 참조가 2군데 있음. 둘 중 테이블의 외래키를 관리할 곳을 지정해야 함.
    - 연관관계 주인 : 왜래키를 관리하는 참조
    - 주인의 반대편 : 왜래키에 영향을 주지 않음, 단순 조회만 가능


--------------------------------------
다대일 [N:1]
--------------------------------------
    - 왜래키(FK) 존재하는 곳에서 참조객체 생성
      예) MEMEMBER.TEAM_ID(FK) : MEMBER 테이블에서 TEAM 테이블 참조
         Member
            id
            Team team


--------------------------------------
일대다 [1:N] 단방향 매핑
--------------------------------------
    - 일대다 단방향은 일대다(1:N)에서 일(1)이 연관관계의 주인
    - 테이블 일대다 관계는 항상 다(N) 쪽에 왜래키가 있음
    - 객체와 테이블의 차이 때문에 반대편 테이블의 왜래키를 관리하는 특이한 구조
    - @JoinColumn을 꼭 사용해야함.
      그렇지 않으면 조인 테이블 방식을 사용함(중간에 테이블을 하나 추가함)


--------------------------------------

--------------------------------------
