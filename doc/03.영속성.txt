--------------------------------------
1. JPA 에서 가장 중요한 2 가지
--------------------------------------
    - 객체와 관계형 데이터베이스 매핑 ( Object Relational Mapping)
    - 영속성 컨텍스트

--------------------------------------
2. 영속성 컨텍스트란?
--------------------------------------
    1) 개요
    - JPA를 이해하는데 가장 중용한 용어
    - "엔터티를 영구 저장하는 환경" 이라는 뜻
    - EntityManager.persist(entity);  <-- 영속성 컨텍스트에 저장한다는 의미임 ( 디비 저장이 아님 )

    - 영속성 컨텍스트는 논리적인 개념
    - 엔터티 매니저를 통해서 영속성 컨텍스트에 접근

    2) J2SE 환경
        - 엔터티 매니저와 영속성 컨텍스트는 1:1 관계

    3) J2EE, 스프링 프레임워크 같은 컨테이너 환경
        - 엔터티 매니저와 영속성 컨텍스트는 N:1 관계
--------------------------------------
3. 엔터티의 생명주기
--------------------------------------
    - 비영속성 (new/transient)
        : 영속성 컨텍스트와 전혀 관계가 없는 새로운 상태
    - 영속(managed)
        : 영속성 컨텍스트에 관리되는 상태
    - 준영속(detached)
        : 영속성 컨텍스트에 저장되었다가 분리된 상태
    - 삭제(removed)
        : 삭제된 상태

    /******************************************/
    // [01] 객체 생성 (비영속)
    Member memberModel = new Member(1L, "오징어1");

    EntityManager em = emf.createEntityManager();
    em.getTransaction().begin();

    // [02] 객체를 저장한 상태 (영속상태)
    em.persist(memberModel);

    // [03] 회원 엔터티를 영속성 컨텍스트에서 분리(준영속 상태)
    em.detach(memberModel);

    // [04] 객체를 삭제한 상태(삭제)
    em.remove(memberModel);

--------------------------------------
4. 영속성 컨텍스트 이점
--------------------------------------
    1) 1차 캐시 ( 데이터베이스 한 트랜잭션 내에서만 유지됨 )
    2) 동일성(identity) 보장 : 객체 관점에서 객체의 주소
    3) 트랜잭션을 지원하는 쓰기 지연 (transactional write-behind)
        --> "쓰기 지연 SQL 저장소"에 SQL 생성 저장.
        --> commit 순간에 일괄 실행.
        --> persistence.xml 에 flush 되는 크기 조정 가능
        <property name="hibernate.jdbc.batch_size" value="10"/>

    4) 변경 감지 (Dirty Checking)
        --> flush 시점에, Entity와 Snapshot(최초시점)을 비교
        --> 변경사항을 "쓰기 지연 SQL 저장소"에 UPDATE SQL 생성 저장.
    5) 지연 로딩 (Lazy Loading)

--------------------------------------
5. Flush
--------------------------------------
    1) Flush 개요
        - 영속성 컨텍스트의 변경 내용을 데이터베이스에 반영
        - 영속성 컨텍스트를 비우지는 않는다.

    2) Flush 발생시 JPA 처리 작업
        - 변경 감지
        - 수정된 엔터티 쓰기 지연 SQL 저장소에 등록
        - 쓰기 지연 SQL 저장소의 쿼리를 데이터베이스에 전송 (등록,수정,삭제)
    3) commit 발생시, DB에 반영됨.
    4) flush 모드 옵션
        - em.setFlushMode(FlushModeType.COMMIT)
        - FlushModeType.AUTO
            : 커밋이나 쿼리를 실행할 때 플러시 (기본값)
        - FlushModeType.COMMIT
            : 커밋할 때만 플러시
--------------------------------------
6. 영속성 컨텍스트 Flush 하는 방법
--------------------------------------
    - em.flush()    : 직접 호출
    - 트랜잭션 커밋    : flush 자동 호출
    - JPQL 쿼리 실행  : flush 자동 호출 (***)

--------------------------------------
7. 준영속 상태로 만드는 방법
--------------------------------------
    . em.detach(entity)
        : 특정 엔터티만 준영속 상태로 전환
    . em.clear()
        : 영속성 컨텍스트를 완전히 초기화
    . em.close()
        : 영속성 컨텍스트를 종료

    Q1. 언제 이런 기능이 필요한가?
    Q2. CreateQuery로 해도 영속성 컨텍스트에 관리되는가? YES!!